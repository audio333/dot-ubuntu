#!/bin/bash

play_local() {
  files="$1"
  mode="$2"
  screen="$3"

  find $files -mindepth 1 -printf '%P\n' | fzf -m --layout reverse | while read -r song; do
    if [[ -z $mode ]]; then
      # video
      TS_SOCKET=/tmp/md tsp mpv --quiet --geometry=-15-60 --autofit="$screen" --title=" Local - $(basename -- "$song")" "$files/$song" >/dev/null 2>&1
    else
      # audio
      TS_SOCKET=/tmp/md tsp mpv --no-video --title=" Local - $(basename -- "$song")" "$files/$song" >/dev/null 2>&1
    fi
  done
}
 
play_online() {
  url="$1"
  format="$2"
  title="$3"
  screen="$4"

  if [ "$format" == "m4a" ]; then
    # audio
    TS_SOCKET=/tmp/md tsp mpv --ytdl-format="bestaudio/best" --quiet "$url" --title=" YT - $title" "$url" >/dev/null 2>&1
  else
    # video
    TS_SOCKET=/tmp/md tsp mpv --ytdl-format="bestvideo[height<=?${format}]+bestaudio/best" --quiet --geometry=-15-60 --autofit="$screen" --title=" YT - $title" "$url" >/dev/null 2>&1
  fi
}

dl() {
  url="$1"
  format="$2"

  case "$format" in
    m4a) format="139" ;;
    360) format="134+139" ;;
    480) format="135+139" ;; # default format
    720) format="136+139" ;;
    1080) format="137+139" ;;
  esac >/dev/null

  TS_SOCKET=/tmp/dl tsp yt-dlp -o "%(title)s - %(uploader)s.%(ext)s" --embed-metadata --restrict-filenames --format "$format" "$url"
}

log_history() {
  url=$1
  hist=$2
  title=$3

  if grep -a -q "$url" "$hist"; then
    echo "already watched - ${title}"
  else
    echo "${url}          # ${title}" >> "$hist" 
    echo "url saved - ${title}"
  fi
}

get_files_or_urls() {
dir="$HOME/video"
hist="$HOME/.local/share/saved/yt_history.txt"
urls=() # array
format="480"
screen="854x480"
mode=""

while [ $# -gt 0 ]; do
  case $1 in
    -y) # ytfzf 
    for link in $(ytfzf -L | xargs); do 
      urls+=("$link")
    done
    ;;
    -d) # dir
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default dir: ${dir}"
    else
      [[ -d "$2" ]] && dir="$2"
    fi

    files=$dir
    ;;
    -f) # yt_history / file with list of urls
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default hist file: ${hist}"
    else
      [[ -f "$2" ]] && hist="$2"
    fi

    for link in $(grep -a -v '^#' "$hist" | fzf -m --layout reverse | cut -d' ' -f1); do 
      urls+=("$link")
    done
    ;;
    -u) # url
    [[ -z "$2" || "$2" == -* ]] && echo "Link not specified"

    urls+=("$2")
    ;;
    -l) 
    TS_SOCKET=/tmp/md tsp -l | sed "
      /ID/d;
      /finished/d;
      s/^.*\(Local.*\/home\/\).*$/\1/; 
      s/^.*\(YT.*http\).*$/\1/;
      s/\/home\/.*//g;
      s/http.*//g"
    ;;
    -F) # video format
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default format: ${format}"
    else
      format="$2"
    fi
    ;;
    -S) # screen size
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default screensize: ${screen}"
    else
      case "$2" in
        sm) screen="640x360" ;;
        sd) screen="854x480" ;;
        md) screen="1247x700" ;;
        hd) screen="1280x720" ;;
        fhd) screen="1920x1080" ;;
      esac
    fi
    ;;
    -D) mode="dl" ;; # change mode to dl
    -A) mode="audio" ;; # change mode to audio only
  esac

  shift
done

# play offline
if [ -n "$files" ]; then
  play_local "$files" "$mode" "$screen" 
fi

# check if link is valid
regex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'

# play online, log or dl
for url in ${urls[@]}; do
  if [[ $url =~ $regex ]]; then
  
    # --simulate - Do not download the video and do not write anything to disk
    title="$(yt-dlp --simulate --print "%(title)s - %(channel)s" "$url")" 

    if [ "$mode" == "dl" ]; then
      dl "$url" "$format" 
    elif [ "$mode" == "audio" ]; then
      format="m4a"
      play_online "$url" "$format" "$title" "$screen"
      log_history "$url" "$hist" "$title"
    else
      play_online "$url" "$format" "$title" "$screen"
      log_history "$url" "$hist" "$title"
    fi

  else
    echo "Invalid URL"
  fi
done
}

get_files_or_urls "$@"
