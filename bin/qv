#!/bin/bash

stationlist="$HOME/.local/share/saved/stations.csv"

rstations+=($(grep -a -v '^#' "$stationlist" | sed "s/ /_/g")) # Array
state="$HOME/.local/bin/.${0##*/}.dat" # File to maintain state
index=$(cat "$state" 2>/dev/null)      # Retrieve last index
nRstations=${#rstations[@]}            # Number of entries in stationlist()

export FZF_DEFAULT_OPTS="-i --layout=reverse --bind 'home:first,end:last'"

select_station() {
  selected="$( grep -nH , "$stationlist" | sed -e 's/:/,/' -e 's/:/,/' | \
    fzf -d , --with-nth -2 \
    --info=hidden --scroll-off=5 --tiebreak=index \
    --prompt="radio stations: " \
    --bind "ctrl-o:execute:${EDITOR:-nano} +{2} {1} >/dev/tty" \
    --bind "ctrl-f:execute:${EDITOR:-nano} {1} >/dev/tty" \
    --bind 'ctrl-x:execute:playerctl --player=mpv stop >/dev/null 2>&1' \
    --bind "ctrl-r:reload:grep -nH , $stationlist | sed -e 's/:/,/' -e 's/:/,/'" \
    --header 'C-x:stop C-o:edit-line C-f:edit-file C-r:reload C-j/k/n/p|home/end:navigate'
    )"
  [ -z "$selected" ] && exit
  selected="$(echo "$selected" | cut -d ',' -f4)"
  playerctl --player=mpv stop >/dev/null 2>&1
  setsid mpv --no-video "$selected" >/dev/null 2>&1 & disown
  printf "%d\n" 0 >"$state"        # Reset index
  sleep 0.2
}

set_wallpaper() {
  dir="$HOME/picture"
  wallpaper="${1:-/Wallpapers}"

  xwallpaper --zoom $(find "$dir/$wallpaper" -iregex '.*.\(jpg\|jpeg\|png\|gif\)' -type f | shuf -n 1)
}

change_station() {
  # Set current index to one if first time, otherwise next value in sequence
  case "$1" in
    next) [[ -z $index ]] && index=1 || index=$((++index % nRstations)) ;;
    prev) [[ -z $index ]] && index=1 || index=$((--index % nRstations)) ;;
  esac

  printf "%d\n" $index >"$state"        # Save new index

  stationname="$(echo "${rstations[index]}" | cut -d ',' -f1)"
  selected="$(echo "${rstations[index]}" | cut -d ',' -f2)"

  playerctl --player=mpv stop >/dev/null 2>&1
  setsid mpv --no-video "$selected" >/dev/null 2>&1 & disown
	dunstify "RADIO: $stationname" -u low -r 9993 -t 2000
  
  # Change wallpaper based on rstation's index.
  case "$index" in
    0) set_wallpaper "Anime" ;;
    1) set_wallpaper "Nature" ;;
    2|5|10|15|20|25) set_wallpaper ;;
  esac

  sleep 0.2
}

quick_play() {
  mode="${1:-audio}"
  song="${2:-$(find ~/video/* -name '*.mp4' | cut -d'/' -f5- | shuf -n 1)}"
  playerctl --player=mpv stop >/dev/null 2>&1

  if [ "$mode" == "video" ]; then
    mpv --quiet "$HOME/video/${song}" >/dev/null 2>&1
  else
    mpv --no-video --title=" Local - $(basename -- "$song") - mpv" "$HOME/video/${song}" >/dev/null 2>&1
  fi
}

quick_selection() {
  # select a song using dmenu
  selected="$(printf "Random song\n$(find ~/video/* -name '*.mp4' | cut -d'/' -f5-)" | dmenu -i -l 30 -p 'MPV Change Song > ')"
  # exit script if no song is selected (e.g hit ESC)
  [ -z "$selected" ] && exit

  if [ $(printf 'N\nY' | dmenu -i -p 'With Video?') = 'Y' ]; then
    [[ "$selected" == "Random song" ]] && quick_play "video" || quick_play "video" "$selected"
  else
    [[ "$selected" == "Random song" ]] && quick_play "audio" || quick_play "audio" "$selected"
  fi
}

play_local() {
  files="$1"
  mode="$2"
  screen="$3"

  find $files -mindepth 1 -printf '%P\n' | fzf -m | while read -r song; do
    if [[ -z $mode ]]; then
      # video
      TS_SOCKET=/tmp/md tsp mpv --quiet --geometry=-15-60 --autofit="$screen" --title=" Local - $(basename -- "$song") - mpv" "$files/$song" >/dev/null 2>&1
    else
      # audio
      TS_SOCKET=/tmp/md tsp mpv --no-video --title=" Local - $(basename -- "$song") - mpv" "$files/$song" >/dev/null 2>&1
    fi
  done
}
 
play_online() {
  url="$1"
  format="$2"
  title="$3"
  screen="$4"

  if [ "$format" == "m4a" ]; then
    # audio
    TS_SOCKET=/tmp/md tsp mpv --ytdl-format="bestaudio/best" --quiet "$url" --title=" YT - $title - mpv" "$url" >/dev/null 2>&1
  else
    # video
    TS_SOCKET=/tmp/md tsp mpv --ytdl-format="bestvideo[height<=?${format}]+bestaudio/best" --quiet --geometry=-15-60 --autofit="$screen" --title=" YT - $title - mpv" "$url" >/dev/null 2>&1
  fi
}

dl() {
  url="$1"
  format="$2"

  case "$format" in
    m4a) format="139" ;;
    360) format="134+139" ;;
    480) format="135+139" ;; # default format
    720) format="136+139" ;;
    1080) format="137+139" ;;
  esac >/dev/null

  TS_SOCKET=/tmp/dl tsp yt-dlp -o "%(title)s - %(uploader)s.%(ext)s" --embed-metadata --restrict-filenames --format "$format" "$url"
}

log_history() {
  url=$1
  hist=$2
  title=$3

  if grep -a -q "$url" "$hist"; then
    echo "already watched - ${title}"
  else
    echo "${url}          # ${title}" >> "$hist" 
    echo "url saved - ${title}"
  fi
}

get_files_or_urls() {
dir="$HOME/video"
hist="$HOME/.local/share/saved/yt_history.txt"
urls=() # array
format="480"
screen="1247x700"
mode=""

while [ $# -gt 0 ]; do
  case $1 in
    -y) # ytfzf 
    urls+=$(ytfzf -L | xargs)
    ;;
    -d) # dir
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default dir: ${dir}"
    else
      [[ -d "$2" ]] && dir="$2"
    fi

    files=$dir
    ;;
    -f) # yt_history / file with list of urls
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default hist file: ${hist}"
    else
      [[ -f "$2" ]] && hist="$2"
    fi

    urls+=$(tac "$hist" | fzf -m | cut -d' ' -f1)
    ;;
    -u) # url / clipboard
    clip=$(xclip -o -selection clipboard 2>/dev/null)

    [[ -z "$2" && -z "$clip" ]] && echo "Link not specified" && exit

    [[ -z "$2" || "$2" == -* ]] && urls+=("$clip") || urls+=("$2")
    ;;
    -l) 
    TS_SOCKET=/tmp/md tsp -l | sed "
      /ID/d;
      /finished/d;
      s/^.*\(Local.*\/home\/\).*$/\1/; 
      s/^.*\(YT.*http\).*$/\1/;
      s/\/home\/.*//g;
      s/http.*//g"
    ;;
    -F) # video format
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default format: ${format}"
    else
      format="$2"
    fi
    ;;
    -S) # screen size
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default screensize: ${screen}"
    else
      case "$2" in
        sm) screen="640x360" ;;
        sd) screen="854x480" ;;
        md) screen="1247x700" ;;
        hd) screen="1280x720" ;;
        fhd) screen="1920x1080" ;;
      esac
    fi
    ;;
    -D) mode="dl" ;; # change mode to dl
    -A) mode="audio" ;; # change mode to audio only
    -r) select_station ;;
    -n) change_station next ;;
    -p) change_station prev ;;
    -a) quick_play ;;
    -v) quick_play "video" ;;
    -s) quick_selection ;;
  esac

  shift
done

# play offline
if [ -n "$files" ]; then
  play_local "$files" "$mode" "$screen" 
fi

# check if link is valid
regex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'

# play online, log or dl
for url in ${urls[@]}; do
  if [[ $url =~ $regex ]]; then
  
    # --simulate - Do not download the video and do not write anything to disk
    title="$(yt-dlp --simulate --print "%(title)s - %(channel)s" "$url")" 

    if [ "$mode" == "dl" ]; then
      dl "$url" "$format" 
    elif [ "$mode" == "audio" ]; then
      format="m4a"
      play_online "$url" "$format" "$title" "$screen"
      log_history "$url" "$hist" "$title"
    else
      play_online "$url" "$format" "$title" "$screen"
      log_history "$url" "$hist" "$title"
    fi

  else
    echo "Invalid URL"
  fi
done
}

get_files_or_urls "$@"
